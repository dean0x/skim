name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rskim
            asset_name: rskim-x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rskim
            asset_name: rskim-x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rskim
            asset_name: rskim-aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rskim.exe
            asset_name: rskim-x86_64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }} -p rskim

      - name: Package (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
          mv ${{ matrix.asset_name }}.tar.gz ../../../

      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
          mv ${{ matrix.asset_name }}.zip ../../../

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: |
            ${{ matrix.asset_name }}.tar.gz
            ${{ matrix.asset_name }}.zip

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          body: |
            ## Installation

            ### Via Cargo
            ```bash
            cargo install rskim
            ```

            ### Via npm
            ```bash
            npm install -g rskim
            ```

            ### Via Binary
            Download the binary for your platform from the assets below.

            See [CHANGELOG.md](https://github.com/dean0x/skim/blob/main/CHANGELOG.md) for details.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  npm-publish:
    name: Publish to npm
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create npm package
        run: |
          mkdir -p npm-package/bin

          # Extract version from tag
          VERSION="${GITHUB_REF#refs/tags/v}"

          # Create package.json
          cat > npm-package/package.json <<EOF
          {
            "name": "rskim",
            "version": "$VERSION",
            "description": "Smart code reader - streaming code transformation for AI agents",
            "bin": {
              "rskim": "./bin/rskim.js"
            },
            "repository": {
              "type": "git",
              "url": "git+https://github.com/dean0x/skim.git"
            },
            "keywords": [
              "code",
              "ast",
              "tree-sitter",
              "llm",
              "transformation"
            ],
            "author": "Skim Contributors",
            "license": "MIT",
            "bugs": {
              "url": "https://github.com/dean0x/skim/issues"
            },
            "homepage": "https://github.com/dean0x/skim#readme",
            "os": [
              "darwin",
              "linux",
              "win32"
            ],
            "cpu": [
              "x64",
              "arm64"
            ]
          }
          EOF

          # Create wrapper script
          cat > npm-package/bin/rskim.js <<'EOF'
          #!/usr/bin/env node
          const { spawnSync } = require('child_process');
          const path = require('path');
          const fs = require('fs');

          function getBinaryPath() {
            const platform = process.platform;
            const arch = process.arch;

            let binaryName = 'rskim';
            if (platform === 'win32') {
              binaryName = 'rskim.exe';
            }

            // Try to find the binary in the package
            const possiblePaths = [
              path.join(__dirname, '..', 'bin', platform, arch, binaryName),
              path.join(__dirname, '..', 'bin', binaryName),
            ];

            for (const p of possiblePaths) {
              if (fs.existsSync(p)) {
                return p;
              }
            }

            console.error('ERROR: rskim binary not found for your platform');
            console.error(\`Platform: \${platform}, Architecture: \${arch}\`);
            console.error('Please report this issue at: https://github.com/dean0x/skim/issues');
            process.exit(1);
          }

          const binary = getBinaryPath();
          const result = spawnSync(binary, process.argv.slice(2), {
            stdio: 'inherit',
          });

          process.exit(result.status || 0);
          EOF

          chmod +x npm-package/bin/rskim.js

          # Copy README
          cp crates/rskim/README.md npm-package/

          # Extract and organize binaries
          cd artifacts
          for dir in */; do
            cd "$dir"
            if [ -f *.tar.gz ]; then
              tar xzf *.tar.gz
            elif [ -f *.zip ]; then
              unzip -q *.zip
            fi
            cd ..
          done

          # Copy binaries to npm package structure
          mkdir -p ../npm-package/bin/linux/x64
          mkdir -p ../npm-package/bin/darwin/x64
          mkdir -p ../npm-package/bin/darwin/arm64
          mkdir -p ../npm-package/bin/win32/x64

          cp rskim-x86_64-unknown-linux-gnu/rskim ../npm-package/bin/linux/x64/ || true
          cp rskim-x86_64-apple-darwin/rskim ../npm-package/bin/darwin/x64/ || true
          cp rskim-aarch64-apple-darwin/rskim ../npm-package/bin/darwin/arm64/ || true
          cp rskim-x86_64-pc-windows-msvc/rskim.exe ../npm-package/bin/win32/x64/ || true

      - name: Publish to npm
        run: cd npm-package && npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
